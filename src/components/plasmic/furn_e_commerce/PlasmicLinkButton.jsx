// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h4YeDEMYgWVsBFTw8FMJtM
// Component: O8HFXgI_9Hdz
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css" // plasmic-import: h4YeDEMYgWVsBFTw8FMJtM/projectcss
import * as sty from "./PlasmicLinkButton.module.css" // plasmic-import: O8HFXgI_9Hdz/css

export const PlasmicLinkButton__VariantProps = new Array("type", "size")

export const PlasmicLinkButton__ArgProps = new Array("href", "text")

function PlasmicLinkButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.a,
        projectcss.a,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__size_small]: hasVariant(variants, "size", "small"),
          [sty.root__type_blankGray]: hasVariant(variants, "type", "blankGray"),
          [sty.root__type_blankOrange]: hasVariant(
            variants,
            "type",
            "blankOrange"
          ),

          [sty.root__type_outlineGray]: hasVariant(
            variants,
            "type",
            "outlineGray"
          ),

          [sty.root__type_solidGray]: hasVariant(variants, "type", "solidGray"),
          [sty.root__type_solidOrange]: hasVariant(
            variants,
            "type",
            "solidOrange"
          ),
        }
      )}
      component={Link}
      href={args.href !== undefined ? args.href : "#"}
      platform={"gatsby"}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Do the thing",
        value: args.text,
        className: classNames(sty.slotTargetText, {
          [sty.slotTargetText__type_blankGray]: hasVariant(
            variants,
            "type",
            "blankGray"
          ),

          [sty.slotTargetText__type_blankOrange]: hasVariant(
            variants,
            "type",
            "blankOrange"
          ),

          [sty.slotTargetText__type_outlineGray]: hasVariant(
            variants,
            "type",
            "outlineGray"
          ),

          [sty.slotTargetText__type_solidGray]: hasVariant(
            variants,
            "type",
            "solidGray"
          ),

          [sty.slotTargetText__type_solidOrange]: hasVariant(
            variants,
            "type",
            "solidOrange"
          ),
        }),
      })}
    </p.PlasmicLink>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLinkButton__ArgProps,
      internalVariantPropNames: PlasmicLinkButton__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicLinkButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkButton"
  } else {
    func.displayName = `PlasmicLinkButton.${nodeName}`
  }
  return func
}

export const PlasmicLinkButton = Object.assign(
  // Top-level PlasmicLinkButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLinkButton
    internalVariantProps: PlasmicLinkButton__VariantProps,
    internalArgProps: PlasmicLinkButton__ArgProps,
  }
)

export default PlasmicLinkButton
/* prettier-ignore-end */
